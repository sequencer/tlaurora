diff --git a/build.sc b/build.sc
index f69d616330..08f92c4097 100644
--- a/build.sc
+++ b/build.sc
@@ -1,221 +1,228 @@
 import mill._
 import mill.scalalib._
+import mill.scalalib.TestModule._
 import mill.scalalib.publish._
 import mill.scalalib.scalafmt._
 import coursier.maven.MavenRepository
-import $ivy.`com.lihaoyi::mill-contrib-buildinfo:$MILL_VERSION`
-import mill.contrib.buildinfo.BuildInfo
-
-object chisel3 extends mill.Cross[chisel3CrossModule]("2.13.10", "2.12.17")
-
-// The following stanza is searched for and used when preparing releases.
-// Please retain it.
-// Provide a managed dependency on X if -DXVersion="" is supplied on the command line.
-val defaultVersions = Map(
-  "firrtl" -> "1.6-SNAPSHOT",
-)
-
-def getVersion(dep: String, org: String = "edu.berkeley.cs") = {
-  val version = sys.env.getOrElse(dep + "Version", defaultVersions(dep))
-  ivy"$org::$dep:$version"
-}
-// Do not remove the above logic, it is needed by the release automation
+import mill.scalalib.api.ZincWorkerUtil.matchingVersions
+import $file.common
 
 object v {
-  val firrtl = getVersion("firrtl")
-  val chiseltest = ivy"edu.berkeley.cs::chiseltest:0.6-SNAPSHOT"
-  val scalatest = ivy"org.scalatest::scalatest:3.2.15"
-  val scalacheck = ivy"org.scalatestplus::scalacheck-1-14:3.2.2.0"
+  val pluginScalaCrossVersions = Seq(
+    // scalamacros paradise version used is not published for 2.12.0 and 2.12.1
+    "2.12.2",
+    "2.12.3",
+    // 2.12.4 is broken in newer versions of Zinc: https://github.com/sbt/sbt/issues/6838
+    "2.12.5",
+    "2.12.6",
+    "2.12.7",
+    "2.12.8",
+    "2.12.9",
+    "2.12.10",
+    "2.12.11",
+    "2.12.12",
+    "2.12.13",
+    "2.12.14",
+    "2.12.15",
+    "2.12.16",
+    "2.12.17",
+    "2.13.0",
+    "2.13.1",
+    "2.13.2",
+    "2.13.3",
+    "2.13.4",
+    "2.13.5",
+    "2.13.6",
+    "2.13.7",
+    "2.13.8",
+    "2.13.9",
+    "2.13.10"
+  )
+  val scalaCrossVersions = Seq(
+    "2.12.17",
+    "2.13.10"
+  )
   val osLib = ivy"com.lihaoyi::os-lib:0.8.1"
   val upickle = ivy"com.lihaoyi::upickle:2.0.0"
   val macroParadise = ivy"org.scalamacros:::paradise:2.1.1"
+  val scalatest = ivy"org.scalatest::scalatest:3.2.14"
+  val scalacheck = ivy"org.scalatestplus::scalacheck-1-14:3.2.2.0"
+  val json4s = ivy"org.json4s::json4s-native:4.0.6"
+  val dataclass = ivy"io.github.alexarchambault::data-class:0.2.5"
+  val commonText = ivy"org.apache.commons:commons-text:1.10.0"
+  val scopt = ivy"com.github.scopt::scopt:3.7.1"
+
+  def scalaReflect(scalaVersion: String) = ivy"org.scala-lang:scala-reflect:$scalaVersion"
+
+  def scalaCompiler(scalaVersion: String) = ivy"org.scala-lang:scala-compiler:$scalaVersion"
+
+  def scalaLibrary(scalaVersion: String) = ivy"org.scala-lang:scala-library:$scalaVersion"
 }
+private def majorScalaVersion(scalaVersion: String) = scalaVersion.split('.')(1).toInt
 
-// Since chisel contains submodule core and macros, a CommonModule is needed
-trait CommonModule extends CrossSbtModule with PublishModule with ScalafmtModule {
-  def firrtlModule: Option[PublishModule] = None
+object firrtl extends mill.Cross[Firrtl](v.scalaCrossVersions: _*)
 
-  def firrtlIvyDeps = if (firrtlModule.isEmpty)
-    Agg(
-      v.firrtl
-    )
-  else Agg.empty[Dep]
+class Firrtl(val crossScalaVersion: String)
+  extends common.FirrtlModule
+    with ChiselPublishModule
+    with CrossSbtModule
+    with ScalafmtModule {
+  def millSourcePath = super.millSourcePath / os.up / "firrtl"
 
-  def chiseltestModule: Option[PublishModule] = None
+  def macroParadiseIvy: Option[Dep] = if (majorScalaVersion(crossScalaVersion) < 13) Some(v.macroParadise) else None
 
-  def chiseltestIvyDeps = if (chiseltestModule.isEmpty)
-    Agg(
-      v.chiseltest
-    )
-  else Agg.empty[Dep]
+  def osLibModuleIvy = v.osLib
 
-  override def moduleDeps = super.moduleDeps ++ firrtlModule
+  def json4sIvy = v.json4s
 
-  override def ivyDeps = super.ivyDeps() ++ Agg(
-    v.osLib,
-    v.upickle
-  ) ++ firrtlIvyDeps
+  def dataclassIvy = v.dataclass
 
-  def publishVersion = "3.6-SNAPSHOT"
+  def commonTextIvy = v.commonText
 
-  // 2.12.10 -> Array("2", "12", "10") -> "12" -> 12
-  protected def majorVersion = crossScalaVersion.split('.')(1).toInt
+  def scoptIvy = v.scopt
+}
 
-  override def repositories = super.repositories ++ Seq(
-    MavenRepository("https://oss.sonatype.org/content/repositories/snapshots"),
-    MavenRepository("https://oss.sonatype.org/content/repositories/releases")
-  )
+object firrtlut extends mill.Cross[FirrtlUnitTest](v.scalaCrossVersions: _*)
 
-  override def scalacOptions = T {
-    super.scalacOptions() ++ Agg(
-      "-deprecation",
-      "-feature"
-    ) ++ (if (majorVersion == 13) Agg("-Ymacro-annotations") else Agg.empty[String])
-  }
+class FirrtlUnitTest(val crossScalaVersion: String)
+  extends common.FirrtlUnitTestModule
+    with CrossModuleBase
+    with ScalafmtModule {
+  override def millSourcePath = firrtl(crossScalaVersion).millSourcePath
 
-  override def compileIvyDeps = if (majorVersion == 13) super.compileIvyDeps else Agg(v.macroParadise)
+  def firrtlModule = firrtl(crossScalaVersion)
 
-  override def scalacPluginIvyDeps = if (majorVersion == 13) super.compileIvyDeps else Agg(v.macroParadise)
+  def scalatestIvy = v.scalatest
 
-  def pomSettings = PomSettings(
-    description = artifactName(),
-    organization = "edu.berkeley.cs",
-    url = "https://www.chisel-lang.org",
-    licenses = Seq(License.`Apache-2.0`),
-    versionControl = VersionControl.github("freechipsproject", "chisel3"),
-    developers = Seq(
-      Developer("jackbackrack", "Jonathan Bachrach", "https://eecs.berkeley.edu/~jrb/")
-    )
-  )
+  def scalacheckIvy = v.scalacheck
+
+  override def sources = T.sources {
+    Seq(PathRef(millSourcePath / "src" / "test")) ++
+      matchingVersions(crossScalaVersion).map(s =>
+        PathRef(millSourcePath / "src" / "test" / s"scala-$s")
+      )
+  }
 }
 
-class chisel3CrossModule(val crossScalaVersion: String) extends CommonModule with BuildInfo {
-  m =>
+object macros extends mill.Cross[Macros](v.scalaCrossVersions: _*)
 
-  /** Default behavior assumes `build.sc` in the upper path of `src`.
-    * This override makes `src` folder stay with `build.sc` in the same directory,
-    * If chisel3 is used as a sub-project, [[millSourcePath]] should be overridden to the folder where `src` located.
-    */
-  override def millSourcePath = super.millSourcePath / os.up
+class Macros(val crossScalaVersion: String)
+  extends common.MacrosModule
+    with ChiselPublishModule
+    with CrossSbtModule
+    with ScalafmtModule {
+  def millSourcePath = super.millSourcePath / os.up / "macros"
 
-  override def mainClass = T {
-    Some("chisel3.stage.ChiselMain")
-  }
+  def scalaReflectIvy = v.scalaReflect(crossScalaVersion)
+
+  def macroParadiseIvy: Option[Dep] = if (majorScalaVersion(crossScalaVersion) < 13) Some(v.macroParadise) else None
+}
 
-  override def moduleDeps = super.moduleDeps ++ Seq(macros, core)
+object core extends mill.Cross[Core](v.scalaCrossVersions: _*)
 
-  override def scalacPluginClasspath = T {
-    super.scalacPluginClasspath() ++ Agg(
-      plugin.jar()
-    )
-  }
+class Core(val crossScalaVersion: String)
+  extends common.CoreModule
+    with ChiselPublishModule
+    with CrossSbtModule
+    with ScalafmtModule {
+  def millSourcePath = super.millSourcePath / os.up / "core"
 
-  override def scalacOptions = T {
-    super.scalacOptions() ++ Agg(s"-Xplugin:${plugin.jar().path}")
-  }
+  def firrtlModule = firrtl(crossScalaVersion)
 
-  object stdlib extends CommonModule {
-    override def moduleDeps = super.moduleDeps ++ Agg(m)
+  def macrosModule = macros(crossScalaVersion)
 
-    override def millSourcePath = m.millSourcePath / "stdlib"
+  def macroParadiseIvy: Option[Dep] = if (majorScalaVersion(crossScalaVersion) < 13) Some(v.macroParadise) else None
 
-    override def crossScalaVersion = m.crossScalaVersion
+  def osLibModuleIvy = v.osLib
 
-    override def scalacPluginClasspath = T { m.scalacPluginClasspath() }
-  }
+  def upickleModuleIvy = v.upickle
+}
 
-  object test extends Tests with TestModule.ScalaTest with ScalafmtModule {
-    override def scalacPluginClasspath = T { m.scalacPluginClasspath() }
+object plugin extends mill.Cross[Plugin](v.pluginScalaCrossVersions: _*)
 
-    override def ivyDeps = m.ivyDeps() ++ Agg(
-      v.scalatest,
-      v.scalacheck
-    )
+class Plugin(val crossScalaVersion: String)
+  extends common.PluginModule
+    with ChiselPublishModule
+    with CrossSbtModule
+    with ScalafmtModule {
+  def millSourcePath = super.millSourcePath / os.up / "plugin"
 
-    override def moduleDeps = super.moduleDeps
-  }
+  def scalaLibraryIvy = v.scalaLibrary(crossScalaVersion)
 
-  object `integration-tests` extends Tests with TestModule.ScalaTest with ScalafmtModule {
-    override def sources = T.sources(millSourcePath / "integration-tests" / "src" / "test" / "scala")
-    override def ivyDeps = m.ivyDeps() ++ Agg(
-      v.scalatest,
-      v.scalacheck
-    ) ++ m.chiseltestIvyDeps
+  def scalaReflectIvy = v.scalaReflect(crossScalaVersion)
 
-    override def moduleDeps = super.moduleDeps ++ Seq(stdlib) ++ chiseltestModule
-  }
+  def scalaCompilerIvy: Dep = v.scalaCompiler(crossScalaVersion)
+}
 
-  override def buildInfoPackageName = Some("chisel3")
+object chisel extends mill.Cross[Chisel](v.scalaCrossVersions: _*)
 
-  override def buildInfoMembers = T {
-    Map(
-      "buildInfoPackage" -> artifactName(),
-      "version" -> publishVersion(),
-      "scalaVersion" -> scalaVersion()
-    )
-  }
+class Chisel(val crossScalaVersion: String)
+  extends common.ChiselModule
+    with ChiselPublishModule
+    with CrossSbtModule
+    with ScalafmtModule {
+  override def millSourcePath = super.millSourcePath / os.up
 
-  object macros extends CommonModule {
+  def macrosModule = macros(crossScalaVersion)
 
-    /** millOuterCtx.segment.pathSegments didn't detect error here. */
-    override def millSourcePath = m.millSourcePath / "macros"
+  def coreModule = core(crossScalaVersion)
 
-    override def crossScalaVersion = m.crossScalaVersion
+  def pluginModule = plugin(crossScalaVersion)
 
-    override def firrtlModule = m.firrtlModule
-  }
+  def macroParadiseIvy = if (majorScalaVersion(crossScalaVersion) < 13) Some(v.macroParadise) else None
+}
 
-  object core extends CommonModule {
+object chiselut extends mill.Cross[ChiselUnitTest](v.scalaCrossVersions: _*)
 
-    /** millOuterCtx.segment.pathSegments didn't detect error here. */
-    override def millSourcePath = m.millSourcePath / "core"
+class ChiselUnitTest(val crossScalaVersion: String)
+  extends common.ChiselUnitTestModule
+    with CrossModuleBase
+    with ScalafmtModule {
+  override def millSourcePath = chisel(crossScalaVersion).millSourcePath
 
-    override def crossScalaVersion = m.crossScalaVersion
+  def chiselModule = chisel(crossScalaVersion)
 
-    override def moduleDeps = super.moduleDeps ++ Seq(macros)
+  def pluginModule = plugin(crossScalaVersion)
 
-    override def firrtlModule = m.firrtlModule
+  def scalatestIvy = v.scalatest
 
-    def scalacOptions = T {
-      super.scalacOptions() ++ Seq(
-        "-deprecation",
-        "-explaintypes",
-        "-feature",
-        "-language:reflectiveCalls",
-        "-unchecked",
-        "-Xcheckinit",
-        "-Xlint:infer-any"
-      )
-    }
+  def scalacheckIvy = v.scalacheck
 
-    override def generatedSources = T {
-      Seq(generatedBuildInfo()._2)
-    }
-  }
+  def macroParadiseIvy: Option[Dep] = if (majorScalaVersion(crossScalaVersion) < 13) Some(v.macroParadise) else None
 
-  object plugin extends CommonModule {
+  override def sources = T.sources {
+    Seq(PathRef(millSourcePath / "src" / "test")) ++
+      matchingVersions(crossScalaVersion).map(s =>
+        PathRef(millSourcePath / "src" / "test" / s"scala-$s")
+      )
+  }
+}
 
-    /** millOuterCtx.segment.pathSegments didn't detect error here. */
-    override def millSourcePath = m.millSourcePath / "plugin"
 
-    override def crossScalaVersion = m.crossScalaVersion
+object stdlib extends mill.Cross[Stdlib](v.scalaCrossVersions: _*)
 
-    override def firrtlModule = m.firrtlModule
+class Stdlib(val crossScalaVersion: String)
+  extends common.StdLibModule
+    with ChiselPublishModule
+    with CrossSbtModule
+    with ScalafmtModule {
+  def millSourcePath = super.millSourcePath / os.up / "stdlib"
 
-    override def ivyDeps = Agg(
-      ivy"${scalaOrganization()}:scala-library:$crossScalaVersion"
-    ) ++ (if (majorVersion == 13) Agg(ivy"${scalaOrganization()}:scala-compiler:$crossScalaVersion")
-          else Agg.empty[Dep])
+  def chiselModule = chisel(crossScalaVersion)
 
-    def scalacOptions = T {
-      Seq(
-        "-Xfatal-warnings"
-      )
-    }
+  def pluginModule = plugin(crossScalaVersion)
 
-    override def artifactName = "chisel3-plugin"
-  }
+  def macroParadiseIvy: Option[Dep] = if (majorScalaVersion(crossScalaVersion) < 13) Some(v.macroParadise) else None
+}
 
-  // make mill publish sbt compatible package
-  override def artifactName = "chisel3"
+trait ChiselPublishModule extends PublishModule {
+  def pomSettings = PomSettings(
+    description = artifactName(),
+    organization = "org.chipsalliance",
+    url = "https://www.chisel-lang.org",
+    licenses = Seq(License.`Apache-2.0`),
+    versionControl = VersionControl.github("chipsalliance", "chisel"),
+    developers = Seq()
+  )
+  def publishVersion = "5.0-SNAPSHOT"
 }
diff --git a/common.sc b/common.sc
new file mode 100644
index 0000000000..96e0c0c1a8
--- /dev/null
+++ b/common.sc
@@ -0,0 +1,179 @@
+import mill._
+import mill.scalalib._
+import $ivy.`com.lihaoyi::mill-contrib-buildinfo:`
+import mill.contrib.buildinfo.BuildInfo
+
+// 12 or 13
+private def majorScalaVersion(scalaVersion: String) = scalaVersion.split('.')(1).toInt
+
+trait HasMacroAnnotations
+  extends ScalaModule {
+  def macroParadiseIvy: Option[Dep]
+
+  def scalacPluginIvyDeps = super.scalacPluginIvyDeps() ++ macroParadiseIvy
+
+  override def scalacOptions = T {
+    if (scalaVersion() == 12) {
+      require(macroParadiseIvy.isDefined, "macroParadiseIvy must be defined for Scala 2.12")
+    }
+    super.scalacOptions() ++
+      (if (majorScalaVersion(scalaVersion()) == 13) Agg("-Ymacro-annotations") else Agg.empty[String])
+  }
+}
+
+trait MacrosModule
+  extends ScalaModule
+    with HasMacroAnnotations {
+  def scalaReflectIvy: Dep
+
+  override def ivyDeps = super.ivyDeps() ++ Some(scalaReflectIvy)
+
+  override def scalacPluginIvyDeps = super.scalacPluginIvyDeps() ++ macroParadiseIvy
+}
+
+trait FirrtlModule 
+  extends ScalaModule
+    with HasMacroAnnotations {
+  def osLibModuleIvy: Dep
+
+  def json4sIvy: Dep
+
+  def dataclassIvy: Dep
+
+  def commonTextIvy: Dep
+
+  def scoptIvy: Dep
+
+  override def ivyDeps = super.ivyDeps() ++ Agg(
+    osLibModuleIvy,
+    json4sIvy,
+    dataclassIvy,
+    commonTextIvy,
+    scoptIvy
+  )
+}
+
+trait FirrtlUnitTestModule
+  extends TestModule
+    with ScalaModule
+    with TestModule.ScalaTest {
+  def firrtlModule: FirrtlModule
+
+  def scalatestIvy: Dep
+
+  def scalacheckIvy: Dep
+
+  override def moduleDeps = Seq(firrtlModule)
+
+  override def ivyDeps = super.ivyDeps() ++ Agg(
+    scalatestIvy,
+    scalacheckIvy
+  )
+}
+
+trait CoreModule
+  extends ScalaModule
+    with HasMacroAnnotations
+    with BuildInfo {
+  def firrtlModule: FirrtlModule
+
+  def macrosModule: MacrosModule
+
+  def osLibModuleIvy: Dep
+
+  def upickleModuleIvy: Dep
+
+  override def moduleDeps = super.moduleDeps ++ Seq(macrosModule, firrtlModule)
+
+  override def ivyDeps = super.ivyDeps() ++ Agg(
+    osLibModuleIvy,
+    upickleModuleIvy
+  )
+
+  override def buildInfoPackageName = Some("chisel3")
+
+  def buildVersion = T("build-from-source")
+
+  override def buildInfoMembers = T {
+    Map(
+      "buildInfoPackage" -> artifactName(),
+      "version" -> buildVersion(),
+      "scalaVersion" -> scalaVersion()
+    )
+  }
+}
+
+trait PluginModule
+  extends ScalaModule {
+  def scalaLibraryIvy: Dep
+
+  def scalaReflectIvy: Dep
+
+  def scalaCompilerIvy: Dep
+
+  override def ivyDeps = super.ivyDeps() ++ Agg(scalaLibraryIvy, scalaReflectIvy, scalaCompilerIvy)
+}
+
+trait HasChiselPlugin
+  extends ScalaModule {
+  def pluginModule: PluginModule
+
+  override def scalacOptions = T {
+    super.scalacOptions() ++ Agg(s"-Xplugin:${pluginModule.jar().path}")
+  }
+
+  override def scalacPluginClasspath = T {
+    super.scalacPluginClasspath() ++ Agg(
+      pluginModule.jar()
+    )
+  }
+}
+
+trait StdLibModule
+  extends ScalaModule
+    with HasChisel {
+  def chiselModule: ChiselModule
+
+  override def moduleDeps = super.moduleDeps ++ Seq(chiselModule)
+}
+
+trait ChiselModule
+  extends ScalaModule
+    with HasChiselPlugin
+    with HasMacroAnnotations {
+  def macrosModule: MacrosModule
+
+  def coreModule: CoreModule
+
+  override def scalacPluginClasspath = T(super.scalacPluginClasspath() ++ Agg(pluginModule.jar()))
+
+  override def moduleDeps = super.moduleDeps ++ Seq(macrosModule, coreModule)
+}
+
+trait HasChisel
+  extends ScalaModule
+    with HasChiselPlugin
+    with HasMacroAnnotations {
+  def chiselModule: ChiselModule
+
+  def pluginModule = chiselModule.pluginModule
+}
+
+trait ChiselUnitTestModule
+  extends TestModule
+    with HasChisel
+    with TestModule.ScalaTest {
+  def chiselModule: ChiselModule
+
+  def scalatestIvy: Dep
+
+  def scalacheckIvy: Dep
+
+  override def moduleDeps = Seq(chiselModule)
+
+  override def ivyDeps = super.ivyDeps() ++ Agg(
+    scalatestIvy,
+    scalacheckIvy
+  )
+}
+
