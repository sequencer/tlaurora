diff --git a/src/main/scala/MulAddRecFN.scala b/src/main/scala/MulAddRecFN.scala
index 5210cd0..7ad46c1 100644
--- a/src/main/scala/MulAddRecFN.scala
+++ b/src/main/scala/MulAddRecFN.scala
@@ -236,7 +236,7 @@ class MulAddRecFNToRaw_postMul(expWidth: Int, sigWidth: Int) extends RawModule
     val notCDom_reduced2AbsSigSum = orReduceBy2(notCDom_absSigSum)
     val notCDom_normDistReduced2 = countLeadingZeros(notCDom_reduced2AbsSigSum)
     val notCDom_nearNormDist = notCDom_normDistReduced2<<1
-    val notCDom_sExp = io.fromPreMul.sExpSum - notCDom_nearNormDist.asUInt().zext
+    val notCDom_sExp = io.fromPreMul.sExpSum - notCDom_nearNormDist.asUInt.zext
     val notCDom_mainSig =
         (notCDom_absSigSum<<notCDom_nearNormDist)(
             sigWidth * 2 + 3, sigWidth - 1)
diff --git a/src/main/scala/RoundAnyRawFNToRecFN.scala b/src/main/scala/RoundAnyRawFNToRecFN.scala
index 53296ab..de8635f 100644
--- a/src/main/scala/RoundAnyRawFNToRecFN.scala
+++ b/src/main/scala/RoundAnyRawFNToRecFN.scala
@@ -181,7 +181,7 @@ class
             )
 //*** IF SIG WIDTH IS VERY NARROW, NEED TO ACCOUNT FOR ROUND-EVEN ZEROING
 //***  M.S. BIT OF SUBNORMAL SIG?
-        val sRoundedExp = sAdjustedExp +& (roundedSig>>outSigWidth).asUInt().zext
+        val sRoundedExp = sAdjustedExp +& (roundedSig>>outSigWidth).asUInt.zext
 
         common_expOut := sRoundedExp(outExpWidth, 0)
         common_fractOut :=
